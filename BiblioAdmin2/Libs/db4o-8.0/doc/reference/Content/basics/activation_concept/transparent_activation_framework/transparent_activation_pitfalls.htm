<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="120" MadCap:lastWidth="624" MadCap:disableMasterStylesheet="true" MadCap:tocPath="Basics Operations &amp; Concepts|Activation|Transparent Activation" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:PathToHelpSystem="../../../../" MadCap:HelpSystemFileName="index.xml" MadCap:SearchType="Stem">
    <head><title>Transparent Activation Pitfalls</title>
        <script type="text/javascript">/* <![CDATA[ */
window.onload = function(){
	var pathToFlash = $('html').attr('MadCap:PathToHelpSystem') + 'Content/Resources/Code/ZeroClipboard.swf';
	ZeroClipboard.setMoviePath(pathToFlash);
			
	function bindToClipBord(element,content){
		var clip = new ZeroClipboard.Client();
		clip.setText(content);
		clip.glue(element);
	};
		
	if(location.protocol==='file:'){
		$('.copylink-marker').remove();
	} else{
			$('.copylink-marker').each(function(){
				var text = $(this).parent().parent().children('.prettyprint').html();
				$(this).hover(function(){
					bindToClipBord(this,text);
				},
				function(){});
			});	
	}		
	prettyPrint();	
};
                /* ]]> */</script>
        <link href="../../../SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/OnlineStyle.css" rel="stylesheet" />
        <script src="../../../SkinSupport/MadCapAll.js">
        </script>
        <script src="../../../Resources/Code/prettify.js">
        </script>
        <script src="../../../Resources/Code/lang-vb.js">
        </script>
        <script src="../../../Resources/Code/jquery.min.js">
        </script>
        <script src="../../../Resources/Code/ZeroClipboard.js">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../../../../index_CSH.html#basics/activation_concept/transparent_activation_framework/transparent_activation_pitfalls.htm" style="">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="../../../basics.htm">Basics Operations &amp; Concepts</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../../activation.htm">Activation</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../transparent_activation_framework.htm">Transparent Activation</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Transparent Activation Pitfalls</span>
        </div>
        <p>
            <script type="text/javascript">/*<![CDATA[*/document.write('<a href="' + location.href +'">');
				document.write("Direct Link");
			document.write('</a>');/*]]>*/</script>
        </p>
        <p>
        </p>
        <h1>Transparent Activation Pitfalls</h1>
        <p><a href="../transparent_activation_framework.htm">Transparent Activation</a> is a powerful feature that can
make development much faster, easier and error-proof. But as any power it can
lead to trouble if used in a wrong way. The aim of this chapter is to point you
out to typical pitfalls, which can lead to unexpected and undesired results.</p>
        <h2>Not Activate Call Before Field Access</h2>
        <p>Before accessing any field you need to call the activate-method. This is true for all <span class="Primarygetter/setter">getter/setter</span> and also for other methods like the to string method or the hash code method. The best strategy is to call the activate-method in the <span class="Primarygetter/setter">getter/setter</span> and then access the field through those even in the class itself.</p>
        <p>Or use the <a href="../../../advanced_topics/enhancement_tools.htm">enhancement-tools</a> to avoid this issue complete. </p>
        <h2>Migrating Between Databases</h2>
        <h3>Problem</h3>
        <p>Transparent <span class="MCPopup"><a href="javascript:void(0);" class="MCPopupSpot" onclick="FMCPopup( event, this ); return false;" MadCap:src="../../activation.htm">Activation<img style="border: none;margin-left: 5px;" src="../../../SkinSupport/ExpandingClosed.gif" MadCap:altsrc="../../../SkinSupport/ExpandingOpen.gif" class="MCExpandingIcon" onload="if ( typeof( FMCPreloadImage ) == 'function' ) { FMCPreloadImage( '../../../SkinSupport/ExpandingOpen.gif' ); }" /></a></span> is implemented through <code>Activatable/IActivatable</code> interface, which binds an object to the current object container. In a case when an object is stored to more than one object container, this logic won't work, as only one binding (activator) is allowed per object. </p>
        <h3>Solution</h3>
        <p>To allow correct behavior of the object between databases, the object should be unbinded before being stored to the next database. This can be done with the following code:</p>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <p>Java: </p>
            <p><code>myObject.bind(null);</code>
            </p>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:net" />
        <p>For more information see an <a href="transparent_activation/migrating_between_databases.htm">example</a>. </p>
        <p MadCap:conditions="Primary.Java">
            <h2>Instrumentation Limitations</h2>
            <h3>Problem</h3>
            <p>For Java instrumentation <a href="../../../advanced_topics/enhancement_tools/enhancement_for_java/complex_example/load_time_enhancement.htm">instrumenting classloader</a> must know
the classes to instrument, i.e. all application classes should be on the
classpath. </p>
            <h3>Solution</h3>
            <p>Make sure that all classes to be instrumented are available
through the classpath</p>
        </p>
        <h2>Debugging Instrumented Classes</h2>
        <p>Debugging instrumented classes may not work 100% correct. <span>Make sure you use the debug-flag for the db4otool</span></p>
        <p>You should be able to debug normally anywhere around
instrumented bytecode. If you still think that the problem occurs in the
instrumented area, please submit a bug report to <a href="http://tracker.db4o.com/">db4o Jira</a>.</p>
        <script type="text/javascript" src="../../../SkinSupport/MadCapBodyEnd.js">
        </script>
    </body>
</html>