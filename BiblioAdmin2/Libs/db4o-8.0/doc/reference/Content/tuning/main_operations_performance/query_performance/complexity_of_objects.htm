<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="120" MadCap:lastWidth="624" MadCap:disableMasterStylesheet="true" MadCap:tocPath="Tuning|Main Operations Performance|Query Performance" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:PathToHelpSystem="../../../../" MadCap:HelpSystemFileName="index.xml" MadCap:SearchType="Stem">
    <head><title>Complexity Of Objects	</title>
        <script type="text/javascript">/* <![CDATA[ */
window.onload = function(){
	var pathToFlash = $('html').attr('MadCap:PathToHelpSystem') + 'Content/Resources/Code/ZeroClipboard.swf';
	ZeroClipboard.setMoviePath(pathToFlash);
			
	function bindToClipBord(element,content){
		var clip = new ZeroClipboard.Client();
		clip.setText(content);
		clip.glue(element);
	};
		
	if(location.protocol==='file:'){
		$('.copylink-marker').remove();
	} else{
			$('.copylink-marker').each(function(){
				var text = $(this).parent().parent().children('.prettyprint').html();
				$(this).hover(function(){
					bindToClipBord(this,text);
				},
				function(){});
			});	
	}		
	prettyPrint();	
};
                /* ]]> */</script>
        <link href="../../../SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/OnlineStyle.css" rel="stylesheet" />
        <script src="../../../Resources/Code/prettify.js">
        </script>
        <script src="../../../Resources/Code/lang-vb.js">
        </script>
        <script src="../../../Resources/Code/jquery.min.js">
        </script>
        <script src="../../../Resources/Code/ZeroClipboard.js">
        </script>
        <script src="../../../SkinSupport/MadCapAll.js" type="text/javascript">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../../../../index_CSH.html#tuning/main_operations_performance/query_performance/complexity_of_objects.htm" style="">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="../../../tuning.htm">Tuning</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../../main_operations_performance.htm">Main Operations Performance</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../query_performance.htm">Query Performance</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Complexity Of Objects</span>
        </div>
        <p>
            <script type="text/javascript">/*<![CDATA[*/document.write('<a href="' + location.href +'">');
				document.write("Direct Link");
			document.write('</a>');/*]]>*/</script>
        </p>
        <p>
        </p>
        <h1>Complexity Of Objects</h1>
        <p>More complex objects are usually more difficult not only to
store, but also to query and instantiate. The following test demonstrates how
query performance depends on class structure, complexity and depth:</p>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <pre class="prettyprint" xml:space="preserve">QueryPerformanceBenchmark.java: runDifferentObjectsTest
private void runDifferentObjectsTest()  {

    init();
    System.out.println("Storing " + _count + " objects with " + _depth
        + " levels of embedded objects:");

    clean();
    System.out.println();
    System.out.println(" - primitive object with int field");
    open(configure());
    storeSimplest();
    close();
    open(configure());
    startTimer();
    Query query = objectContainer.query();
    query.constrain(SimplestItem.class);
    query.descend("_id").constrain(1);
    List result = query.execute();
    SimplestItem simplestItem = (SimplestItem) result.queryByExample(0);
    stopTimer("Querying SimplestItem: " + simplestItem._id);
    close();

    open(configure());
    System.out.println();
    System.out.println(" - object with String field");
    store();
    close();
    open(configure());
    startTimer();
    query = objectContainer.query();
    query.constrain(Item.class);
    query.descend("_name").constrain("level1/2");
    result = query.execute();
    Item item = (Item) result.queryByExample(0);
    stopTimer("Querying object with String field: " + item._name);
    close();

    clean();
    open(configure());
    System.out.println();
    System.out.println(" - object with StringBuffer field");
    storeWithStringBuffer();
    close();
    open(configure());
    startTimer();
    query = objectContainer.query();
    query.constrain(ItemWithStringBuffer.class);
    query.descend("_name").constrain(new StringBuffer("level1/2"));
    result = query.execute();
    ItemWithStringBuffer itemWithSB = (ItemWithStringBuffer) result.queryByExample(0);
    stopTimer("Querying object with StringBuffer field: "
        + itemWithSB._name);
    close();

    clean();
    open(configure());
    System.out.println();
    System.out.println(" - object with int array field");
    storeWithArray();
    close();
    open(configure());
    startTimer();
    query = objectContainer.query();
    query.constrain(ItemWithArray.class);
    Query idQuery = query.descend("_id");
    idQuery.constrain(new Integer(1));
    idQuery.constrain(new Integer(2));
    idQuery.constrain(new Integer(3));
    idQuery.constrain(new Integer(4));
    result = query.execute();

    ItemWithArray itemWithArray = (ItemWithArray) result.queryByExample(0);
    stopTimer("Querying object with Array field: [" + itemWithArray._id[0]
        + ", " + +itemWithArray._id[1] + ", " + +itemWithArray._id[2]
        + ", " + +itemWithArray._id[0] + "]");
    close();

    clean();
    open(configure());
    System.out.println();
    System.out.println(" - object with ArrayList field");
    storeWithArrayList();
    close();
    open(configure());
    startTimer();
    query = objectContainer.query();
    query.constrain(ItemWithArrayList.class);
    query.descend("_ids").constrain(1).contains();
    result = query.execute();
    ItemWithArrayList itemWithArrayList = (ItemWithArrayList) result.queryByExample(0);
    stopTimer("Querying object with ArrayList field: "
        + itemWithArrayList._ids.toString());
    close();

  }</pre>
            <pre class="prettyprint" xml:space="preserve">QueryPerformanceBenchmark.java: init
private void init()  {
    _filePath = "performance.db4o";
    // amount of objects
    _count = 10000;
    // depth of objects
    _depth = 3;
    _isClientServer = false;

  }</pre>
            <pre class="prettyprint" xml:space="preserve">QueryPerformanceBenchmark.java: configure
private Configuration configure()  {
    Configuration config = Db4o.newConfiguration();
    return config;
  }</pre>
            <pre class="prettyprint" xml:space="preserve">QueryPerformanceBenchmark.java: SimplestItem
public static class SimplestItem  {

    public int _id;
    public SimplestItem _child;

    public SimplestItem()  {
    }

    public SimplestItem(int id, SimplestItem child)  {
      _id = id;
      _child = child;
    }
  }</pre>
            <pre class="prettyprint" xml:space="preserve">QueryPerformanceBenchmark.java: ItemWithStringBuffer
public static class ItemWithStringBuffer  {

    public StringBuffer _name;
    public ItemWithStringBuffer _child;

    public ItemWithStringBuffer()  {
    }

    public ItemWithStringBuffer(StringBuffer name,
        ItemWithStringBuffer child)  {
      _name = name;
      _child = child;
    }
  }</pre>
            <pre class="prettyprint" xml:space="preserve">QueryPerformanceBenchmark.java: ItemWithArray
public static class ItemWithArray  {

    public int[] _id;
    public ItemWithArray _child;

    public ItemWithArray()  {
    }

    public ItemWithArray(int[] id, ItemWithArray child)  {
      _id = id;
      _child = child;
    }
  }</pre>
            <pre class="prettyprint" xml:space="preserve">QueryPerformanceBenchmark.java: ItemWithArrayList
public static class ItemWithArrayList  {

    public ArrayList _ids;
    public ItemWithArrayList _child;

    public ItemWithArrayList()  {
    }

    public ItemWithArrayList(ArrayList ids, ItemWithArrayList child)  {
      _ids = ids;
      _child = child;
    }
  }</pre>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:net" />
        <p>Results from the test machine:</p>
        <p><i>- primitive object
with int field</i>
        </p>
        <p><i>Store 30000
objects: 1878ms</i>
        </p>
        <p><i>Querying
SimplestItem: 1: 425ms</i>
        </p>
        <p><i></i>
        </p>
        <p><i> - object with String field</i>
        </p>
        <p><i>Store 30000
objects: 2599ms</i>
        </p>
        <p><i>Querying object
with String field: level1/2: 436ms</i>
        </p>
        <p><i></i>
        </p>
        <p><i> - object with StringBuffer field</i>
        </p>
        <p><i>Store 30000
objects: 5658ms</i>
        </p>
        <p><i>Querying object
with StringBuffer field: level1/2: 3489ms</i>
        </p>
        <p><i></i>
        </p>
        <p><i> - object with int array field</i>
        </p>
        <p><i>Store 30000
objects: 2487ms</i>
        </p>
        <p><i>Querying object
with Array field: [1, 2, 3, 1]: 1777ms</i>
        </p>
        <p><i></i>
        </p>
        <p><i> - object with ArrayList field</i>
        </p>
        <p><i>Store 30000
objects: 5302ms</i>
        </p>
        <p><i>Querying object
with ArrayList field: [1, 2, 3, 4]: 3796ms</i>
        </p>
        <p MadCap:conditions="Primary.Online">Download example code:</p>
        <p MadCap:conditions="Primary.Online">
            <MadCap:conditionalText MadCap:conditions="Primary.Java"><a href="queryperformancejava.zip">Java </a>
            </MadCap:conditionalText>
        </p>
        <script type="text/javascript" src="../../../SkinSupport/MadCapBodyEnd.js">
        </script>
    </body>
</html>