<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="120" MadCap:lastWidth="624" MadCap:disableMasterStylesheet="true" MadCap:tocPath="Tuning|Main Operations Performance|Update Performance" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:PathToHelpSystem="../../../../" MadCap:HelpSystemFileName="index.xml" MadCap:SearchType="Stem">
    <head><title>Object Structure	</title>
        <script type="text/javascript">/* <![CDATA[ */
window.onload = function(){
	var pathToFlash = $('html').attr('MadCap:PathToHelpSystem') + 'Content/Resources/Code/ZeroClipboard.swf';
	ZeroClipboard.setMoviePath(pathToFlash);
			
	function bindToClipBord(element,content){
		var clip = new ZeroClipboard.Client();
		clip.setText(content);
		clip.glue(element);
	};
		
	if(location.protocol==='file:'){
		$('.copylink-marker').remove();
	} else{
			$('.copylink-marker').each(function(){
				var text = $(this).parent().parent().children('.prettyprint').html();
				$(this).hover(function(){
					bindToClipBord(this,text);
				},
				function(){});
			});	
	}		
	prettyPrint();	
};
                /* ]]> */</script>
        <link href="../../../SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/OnlineStyle.css" rel="stylesheet" />
        <script src="../../../Resources/Code/prettify.js">
        </script>
        <script src="../../../Resources/Code/lang-vb.js">
        </script>
        <script src="../../../Resources/Code/jquery.min.js">
        </script>
        <script src="../../../Resources/Code/ZeroClipboard.js">
        </script>
        <script src="../../../SkinSupport/MadCapAll.js" type="text/javascript">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../../../../index_CSH.html#tuning/main_operations_performance/update_performance/object_structure.htm" style="">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="../../../tuning.htm">Tuning</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../../main_operations_performance.htm">Main Operations Performance</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../update_performance.htm">Update Performance</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Object Structure</span>
        </div>
        <p>
            <script type="text/javascript">/*<![CDATA[*/document.write('<a href="' + location.href +'">');
				document.write("Direct Link");
			document.write('</a>');/*]]>*/</script>
        </p>
        <p>
        </p>
        <h1>Object Structure</h1>
        <p>
        </p>
        <p>Update performance is dependent upon the structure and
complexity of objects. This is demonstrated in the following test:</p>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <pre class="prettyprint" xml:space="preserve">UpdatePerformanceBenchmark.java: runDifferentObjectsTest
private void runDifferentObjectsTest() {
      System.out.println("Update test with different objects");
      int objectsToUpdate = 90;
      int updated = objectsToUpdate;
          
      initDifferentObjectsTest();
      
      clean();
      System.out.println(" - primitive object with int field");
      open(configure());
      storeSimplest();
      
    ObjectSet result = objectContainer.queryByExample(null);
    startTimer();
    for (int i = 0; i &lt; objectsToUpdate; i ++) {
      if (result.hasNext()) {
        SimplestItem item = (SimplestItem)result.next();
        item._id = 1;
          update(item);  
      } else  {
        updated = i;
        break;
      }
    }
      stopTimer("Updated " + updated + " items");
      close();
    
      clean();
      open(configure());
      System.out.println(" - object with String field");
      store();
      updated = objectsToUpdate;
      result = objectContainer.queryByExample(null);
      startTimer();
      for (int i = 0; i &lt; objectsToUpdate; i ++) {
      if (result.hasNext()) {
        Item item = (Item)result.next();
        item._name = "Updated";
          update(item);  
      } else  {
        updated = i;
        break;
      }
    }
      stopTimer("Updated " + updated + " items");
      close();
      
      clean();
      open(configure());
      System.out.println(" - object with StringBuffer field");
      storeWithStringBuffer();
      
      updated = objectsToUpdate;
      result = objectContainer.queryByExample(null);
      startTimer();
      for (int i = 0; i &lt; objectsToUpdate; i ++) {
      if (result.hasNext()) {
        ItemWithStringBuffer item = (ItemWithStringBuffer)result.next();
        item._name = new StringBuffer("Updated");
          update(item);  
      } else  {
        updated = i;
        break;
      }
    }
      stopTimer("Updated " + updated + " items");
      close();
      
      clean();
      open(configure());
      System.out.println(" - object with int array field");
      storeWithArray();
      updated = objectsToUpdate;
      result = objectContainer.queryByExample(null);
      startTimer();
      for (int i = 0; i &lt; objectsToUpdate; i ++) {
      if (result.hasNext()) {
        ItemWithArray item = (ItemWithArray)result.next();
        item._id = new int[] {1,2,3};
          update(item);  
      } else  {
        updated = i;
        break;
      }
    }
      stopTimer("Updated " + updated + " items");
      close();
      
      clean();
      open(configure());
      System.out.println(" - object with ArrayList field");
      storeWithArrayList();
      updated = objectsToUpdate;
      result = objectContainer.queryByExample(null);
      startTimer();
      for (int i = 0; i &lt; objectsToUpdate; i ++) {
      if (result.hasNext()) {
        ItemWithArrayList item = (ItemWithArrayList)result.next();
        item._ids = new ArrayList();
          update(item);  
      } else  {
        updated = i;
        break;
      }
    }
      stopTimer("Updated " + updated + " items");
      close();
    }</pre>
            <pre class="prettyprint" xml:space="preserve">UpdatePerformanceBenchmark.java: SImplestItem
public static class SimplestItem  {
        
        public int _id;
        public SimplestItem _child;

        public SimplestItem() {
        }
        
        public SimplestItem(int id, SimplestItem child) {
            _id = id;
            _child = child;
        }
    }</pre>
            <pre class="prettyprint" xml:space="preserve">UpdatePerformanceBenchmark.java: ItemWithStringBuffer
public static class ItemWithStringBuffer  {
        
        public StringBuffer _name;
        public ItemWithStringBuffer _child;
        
        public ItemWithStringBuffer() {
        }
        
        public ItemWithStringBuffer(StringBuffer name, 
ItemWithStringBuffer child) {
            _name = name;
            _child = child;
        }
    }</pre>
            <pre class="prettyprint" xml:space="preserve">UpdatePerformanceBenchmark.java: ItemWithArray
public static class ItemWithArray  {
        
        public int[] _id;
        public ItemWithArray _child;
        
        public ItemWithArray() {
        }
        
        public ItemWithArray(int[] id, ItemWithArray child) {
            _id = id;
            _child = child;
        }
    }</pre>
            <pre class="prettyprint" xml:space="preserve">UpdatePerformanceBenchmark.java: ItemWithArrayList
public static class ItemWithArrayList  {
        
        public ArrayList _ids;
        public ItemWithArrayList _child;
        
        public ItemWithArrayList() {
        }
        
        public ItemWithArrayList(ArrayList ids, ItemWithArrayList child) {
            _ids = ids;
            _child = child;
        }
    }</pre>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:net" />
        <p>The results:</p>
        <p><i>Update test with different objects</i>
        </p>
        <p><i> - primitive
object with int field</i>
        </p>
        <p><i>Store 1000 objects: 273ms</i>
        </p>
        <p><i>Updated 90 items: 185ms</i>
        </p>
        <p><i> - object with
String field</i>
        </p>
        <p><i>Store 1000 objects: 166ms</i>
        </p>
        <p><i>Updated 90 items: 158ms</i>
        </p>
        <p><i> - object with
StringBuffer field</i>
        </p>
        <p><i>Store 1000 objects: 199ms</i>
        </p>
        <p><i>Updated 90 items: 488ms</i>
        </p>
        <p><i> - object with
int array field</i>
        </p>
        <p><i>Store 1000 objects: 78ms</i>
        </p>
        <p><i>Updated 90 items: 134ms</i>
        </p>
        <p><i> - object with
ArrayList field</i>
        </p>
        <p><i>Store 1000 objects: 191ms</i>
        </p>
        <p><i>Updated 90 items: 647ms</i>
        </p>
        <p>In general update of a more complex object takes more time,
however the exact result depends on the TypeHandler implementation.</p>
        <p MadCap:conditions="Primary.Online">Download example code:</p>
        <p MadCap:conditions="Primary.Online">
            <MadCap:conditionalText MadCap:conditions="Primary.Java"><a href="updateperformancejava.zip">Java </a>
            </MadCap:conditionalText>
        </p>
        <script type="text/javascript" src="../../../SkinSupport/MadCapBodyEnd.js">
        </script>
    </body>
</html>