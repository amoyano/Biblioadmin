<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="120" MadCap:lastWidth="624" MadCap:disableMasterStylesheet="true" MadCap:tocPath="Tuning|Main Operations Performance|Insert Performance" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:PathToHelpSystem="../../../../" MadCap:HelpSystemFileName="index.xml" MadCap:SearchType="Stem">
    <head><title>Object Structure	</title>
        <script type="text/javascript">/* <![CDATA[ */
window.onload = function(){
	var pathToFlash = $('html').attr('MadCap:PathToHelpSystem') + 'Content/Resources/Code/ZeroClipboard.swf';
	ZeroClipboard.setMoviePath(pathToFlash);
			
	function bindToClipBord(element,content){
		var clip = new ZeroClipboard.Client();
		clip.setText(content);
		clip.glue(element);
	};
		
	if(location.protocol==='file:'){
		$('.copylink-marker').remove();
	} else{
			$('.copylink-marker').each(function(){
				var text = $(this).parent().parent().children('.prettyprint').html();
				$(this).hover(function(){
					bindToClipBord(this,text);
				},
				function(){});
			});	
	}		
	prettyPrint();	
};
                /* ]]> */</script>
        <link href="../../../SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/OnlineStyle.css" rel="stylesheet" />
        <script src="../../../Resources/Code/prettify.js">
        </script>
        <script src="../../../Resources/Code/lang-vb.js">
        </script>
        <script src="../../../Resources/Code/jquery.min.js">
        </script>
        <script src="../../../Resources/Code/ZeroClipboard.js">
        </script>
        <script src="../../../SkinSupport/MadCapAll.js" type="text/javascript">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../../../../index_CSH.html#tuning/main_operations_performance/insert_performance/object_structure.htm" style="">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="../../../tuning.htm">Tuning</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../../main_operations_performance.htm">Main Operations Performance</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../insert_performance.htm">Insert Performance</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Object Structure</span>
        </div>
        <p>
            <script type="text/javascript">/*<![CDATA[*/document.write('<a href="' + location.href +'">');
				document.write("Direct Link");
			document.write('</a>');/*]]>*/</script>
        </p>
        <p>
        </p>
        <h1>Object Structure</h1>
        <p>Object Structure naturally has a major influence on insert
performance: inserting one object, which is a linked list of 1000 members, is
much slower than inserting an object with a couple of primitive fields.</p>
        <p>The following test compares storing time of similar objects
with one different field:</p>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <pre class="prettyprint" xml:space="preserve">InsertPerformanceBenchmark.java: runDifferentObjectsTest
private void runDifferentObjectsTest() {
      
      configure();
      init();
      System.out.println("Storing " + _count + " objects with " + _depth 
+ " levels of embedded objects:");
      
      clean();
      System.out.println(" - primitive object with int field");
      open();
      storeSimplest();
      close();
      
      open();
      System.out.println(" - object with String field");
      store();
      close();
      
      clean();
      open();
      System.out.println(" - object with StringBuffer field");
      storeWithStringBuffer();
      close();
      
      clean();
      open();
      System.out.println(" - object with int array field");
      storeWithArray();
      close();
      
      clean();
      open();
      System.out.println(" - object with ArrayList field");
      storeWithArrayList();
      close();
      
    }</pre>
            <pre class="prettyprint" xml:space="preserve">InsertPerformanceBenchmark.java: configure
private void configure() {
      Configuration config = Db4o.configure(); 
        config.lockDatabaseFile(false);
        config.weakReferences(false);
        config.io(new MemoryIoAdapter());
        config.flushFileBuffers(false);
    }</pre>
            <pre class="prettyprint" xml:space="preserve">InsertPerformanceBenchmark.java: init
private void init() {
      _count = 10000;
        _depth = 3;
        _isClientServer = false;
          
    }</pre>
            <pre class="prettyprint" xml:space="preserve">InsertPerformanceBenchmark.java: storeSimplest
private void storeSimplest() {
        startTimer();
        for (int i = 0; i &lt; _count ;i++)  {
          SimplestItem item = new SimplestItem(i, null);
            for (int j = 1; j &lt; _depth; j++)  {
                item = new SimplestItem(i, item);
            }
            objectContainer.store(item);
        }
        objectContainer.commit();
        stopTimer("Store "+ totalObjects() + " objects");
    }</pre>
            <pre class="prettyprint" xml:space="preserve">InsertPerformanceBenchmark.java: store
private void store() {
        startTimer();
        for (int i = 0; i &lt; _count ;i++)  {
            Item item = new Item("load", null);
            for (int j = 1; j &lt; _depth; j++)  {
                item = new Item("load", item);
            }
            objectContainer.store(item);
        }
        objectContainer.commit();
        stopTimer("Store "+ totalObjects() + " objects");
    }</pre>
            <pre class="prettyprint" xml:space="preserve">InsertPerformanceBenchmark.java: storeWithStringBuffer
private void storeWithStringBuffer() {
        startTimer();
        for (int i = 0; i &lt; _count ;i++)  {
            ItemWithStringBuffer item = new ItemWithStringBuffer(
new StringBuffer("load"), null);
            for (int j = 1; j &lt; _depth; j++)  {
                item = new ItemWithStringBuffer(new StringBuffer("load"), item);
            }
            objectContainer.store(item);
        }
        objectContainer.commit();
        stopTimer("Store "+ totalObjects() + " objects");
    }</pre>
            <pre class="prettyprint" xml:space="preserve">InsertPerformanceBenchmark.java: storeWithArray
private void storeWithArray() {
        startTimer();
        int[] array = new int[] {1,2,3,4};
        for (int i = 0; i &lt; _count ;i++)  {
          int[] id = new int[] {1,2,3,4};
          ItemWithArray item = new ItemWithArray(id, null);
            for (int j = 1; j &lt; _depth; j++)  {
              int[] id1 = new int[] {1,2,3,4};
                item = new ItemWithArray(id1, item);
            }
            objectContainer.store(item);
        }
        objectContainer.commit();
        stopTimer("Store "+ totalObjects() + " objects");
    }</pre>
            <pre class="prettyprint" xml:space="preserve">InsertPerformanceBenchmark.java: storeWithArrayList
private void storeWithArrayList() {
      startTimer();
      ArrayList idList = new ArrayList();
      idList.add(1);
      idList.add(2);
      idList.add(3);
      idList.add(4);
        for (int i = 0; i &lt; _count ;i++)  {
          ArrayList ids = new ArrayList();
          ids.addAll(idList);
          ItemWithArrayList item = new ItemWithArrayList(ids, null);
            for (int j = 1; j &lt; _depth; j++)  {
              ArrayList ids1 = new ArrayList();
              ids1.addAll(idList);
              item = new ItemWithArrayList(ids1, item);
            }
            objectContainer.store(item);
        }
        objectContainer.commit();
        stopTimer("Store "+ totalObjects() + " objects");
    }</pre>
            <pre class="prettyprint" xml:space="preserve">InsertPerformanceBenchmark.java: SimplestItem
public static class SimplestItem  {
        
        public int _id;
        public SimplestItem _child;

        public SimplestItem() {
        }
        
        public SimplestItem(int id, SimplestItem child) {
            _id = id;
            _child = child;
        }
    }</pre>
            <pre class="prettyprint" xml:space="preserve">InsertPerformanceBenchmark.java: ItemWithArray
public static class ItemWithArray  {
        
        public int[] _id;
        public ItemWithArray _child;
        
        public ItemWithArray() {
        }
        
        public ItemWithArray(int[] id, ItemWithArray child) {
            _id = id;
            _child = child;
        }
    }</pre>
            <pre class="prettyprint" xml:space="preserve">InsertPerformanceBenchmark.java: ItemWithArrayList
public static class ItemWithArrayList  {
        
        public ArrayList _ids;
        public ItemWithArrayList _child;
        
        public ItemWithArrayList() {
        }
        
        public ItemWithArrayList(ArrayList ids, ItemWithArrayList child) {
            _ids = ids;
            _child = child;
        }
    }</pre>
            <pre class="prettyprint" xml:space="preserve">InsertPerformanceBenchmark.java: ItemWithStringBuffer
public static class ItemWithStringBuffer  {
        
        public StringBuffer _name;
        public ItemWithStringBuffer _child;
        
        public ItemWithStringBuffer() {
        }
        
        public ItemWithStringBuffer(StringBuffer name, 
ItemWithStringBuffer child) {
            _name = name;
            _child = child;
        }
    }</pre>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:net" />
        <p>The following results were achieved for the
<a href="../insert_performance.htm">testing configuration</a>:</p>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <p>Java:</p>
            <p>Storing 10000 objects with 3 levels of embedded objects:</p>
            <p> - primitive object
with int field</p>
            <p>Store 30000 objects: 820ms</p>
            <p> - object with String
field</p>
            <p>Store 30000 objects: 803ms</p>
            <p> - object with
StringBuffer field</p>
            <p>Store 30000 objects: 2182ms</p>
            <p> - object with int
array field</p>
            <p>Store 30000 objects: 810ms</p>
            <p> - object with
ArrayList field</p>
            <p>Store 30000 objects: 2178ms </p>
        </p>
        <p MadCap:conditions="Global.Primary:java" />
        <p MadCap:conditions="Global.Primary:net" />
        <p MadCap:conditions="Primary.Online">Download example code:</p>
        <p MadCap:conditions="Primary.Online">
            <MadCap:conditionalText MadCap:conditions="Primary.Java"><a href="../performancejava.zip">Java </a>
            </MadCap:conditionalText>
        </p>
        <script type="text/javascript" src="../../../SkinSupport/MadCapBodyEnd.js">
        </script>
    </body>
</html>