<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="120" MadCap:lastWidth="624" MadCap:disableMasterStylesheet="true" MadCap:tocPath="Platform Specific Issues|Android|Comparison With SQLite" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:PathToHelpSystem="../../../" MadCap:HelpSystemFileName="index.xml" MadCap:SearchType="Stem">
    <head><title>Changing Data</title>
        <script type="text/javascript">/* <![CDATA[ */
window.onload = function(){
	var pathToFlash = $('html').attr('MadCap:PathToHelpSystem') + 'Content/Resources/Code/ZeroClipboard.swf';
	ZeroClipboard.setMoviePath(pathToFlash);
			
	function bindToClipBord(element,content){
		var clip = new ZeroClipboard.Client();
		clip.setText(content);
		clip.glue(element);
	};
		
	if(location.protocol==='file:'){
		$('.copylink-marker').remove();
	} else{
			$('.copylink-marker').each(function(){
				var text = $(this).parent().parent().children('.prettyprint').html();
				$(this).hover(function(){
					bindToClipBord(this,text);
				},
				function(){});
			});	
	}		
	prettyPrint();	
};
                /* ]]> */</script>
        <link href="../../SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/OnlineStyle.css" rel="stylesheet" />
        <script src="../../Resources/Code/prettify.js">
        </script>
        <script src="../../Resources/Code/lang-vb.js">
        </script>
        <script src="../../Resources/Code/jquery.min.js">
        </script>
        <script src="../../Resources/Code/ZeroClipboard.js">
        </script>
        <script src="../../SkinSupport/MadCapAll.js" type="text/javascript">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../../../index_CSH.html#platform_specific_issues/android/changing_data.htm" style="">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox"><span class="MCBreadcrumbsPrefix">You are here: </span><a class="MCBreadcrumbsLink" href="../../platform_specific_issues.htm">Platform Specific Issues</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../android.htm">Android</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="comparison_with_sqlite.htm">Comparison With SQLite</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Changing Data</span>
        </div>
        <p>
            <script type="text/javascript">/*<![CDATA[*/document.write('<a href="' + location.href +'">');
				document.write("Direct Link");
			document.write('</a>');/*]]>*/</script>
        </p>
        <p>
        </p>
        <h1>Changing Data</h1>
        <p>For this test we will select and update a car with a new
pilot, where existing pilot has 15 points:</p>
        <h2>SQLite</h2>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve">SQLiteDatabase db = database();
db.execSQL("INSERT INTO REG_RECORDS (id,year) VALUES ('A1', DATETIME('NOW'))");

ContentValues updateValues = new ContentValues();
updateValues.put("reg_record", "A1");
int count = db.update(DB_TABLE_CAR, updateValues,
		"pilot IN (SELECT id FROM " + DB_TABLE_PILOT
				+ " WHERE points = 15)", null);
if (count == 0) {
	logToConsole(0, "Car not found, refill the database to continue.",
			false);
} else {
	Cursor c = db.rawQuery("SELECT c.model, r.id, r.year from car c, "
			+ "REG_RECORDS r, pilot p where c.reg_record = r.id "
			+ "AND c.pilot = p.id AND p.points = 15;", null);
	if (c.getCount() == 0) {
		logToConsole(0,
				"Car not found, refill the database to continue.",
				false);
		return;
	}
	c.moveToFirst();
	String date = c.getString(2);
	
	Date dt = parseDate(date);
	RegistrationRecord record = new RegistrationRecord(c.getString(1),dt);
	
	Car car = new Car();
	car.setModel(c.getString(0));
	car.setRegistration(record);
	logToConsole(startTime, "Updated Car (" + car + "): ", true);
}</pre>
            <div class="codesnippet-meta">SqlExample.java: update a car with SQLite
			<div class="codedownload"><a href="../../CodeExamples/Android/src/com/db4odoc/android/Example-db4odoc-android-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <h2>db4o</h2>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve">ObjectContainer container = database();
if (container != null){
	ObjectSet&lt;Car&gt;  result = container.query(new Predicate&lt;Car&gt;(){
		@Override
		public boolean match(Car car) {
			return car.getPilot().getPoints()==15;
		}
		
	});
	if (!result.hasNext()){
		logToConsole(0, "Car not found, refill the database to continue.", false);
	} else {
		Car car = result.next();
		logToConsole(startTime, "Selected Car (" + car + "): ", false);
		startTime = System.currentTimeMillis();
		car.setRegistration(new RegistrationRecord("A1", new Date()));
		logToConsole(startTime, "Updated Car (" + car + "): ", true);
	}			
}</pre>
            <div class="codesnippet-meta">Db4oExample.java: update a car with db4o
			<div class="codedownload"><a href="../../CodeExamples/Android/src/com/db4odoc/android/Example-db4odoc-android-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <h2>Conclusion</h2>
        <p> In this example db4o and SQLite actually behave quite differently. For SQLite in order to update a pilot in an existing car in the database the following actions are needed:</p>
        <ol>
            <li value="1">A new pilot should be created and saved to the database.</li>
            <li value="2">New pilot's primary key (101) should be retrieved (not shown in this example, but is necessary for a real database application).</li>
            <li value="3">An update statement should be issued to replace pilot field in the car table.</li>
        </ol>
        <p>For db4o database the sequence will be the following:</p>
        <ol>
            <li value="1">Retrieve the car from the database</li>
            <li value="2">Update the car with a new pilot object</li>
        </ol>
        <p>As you can see the only benefit of SQLite API is that the car can be selected and updated in one statement. But in the same time there are serious disadvantages:</p>
        <ul>
            <li value="1">A new pilot record should be created absolutely separately (in a real database will also include ORM)</li>
            <li value="2">The pilot's ID needs to be retrieved separately (we must  sure that it is a correct id)  </li>
        </ul>In db4o we avoid these disadvantages as creating new pilot and updating the car value are actually combined in one atomic operation.  
     



        <script type="text/javascript" src="../../SkinSupport/MadCapBodyEnd.js"></script></body>
</html>